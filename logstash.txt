
----------------------------
unorganized
----------------------------



----------------------------
transformations / filters
----------------------------

    # simple ruby code

    ruby {
        code => '
            input = event.get("INPUT_FIELD")
            event.set("OUTPUT_FIELD", input)
        '
    }

	# simple concatenate

	mutate {
        add_field => { "target_field" => "%{source_field_1} %{source_field_2}"}
    }

    # multiple fields can be added

    mutate {
        add_field => {
            "target_field1" => "%{source_field_1}"
            "target_field2" => "%{source_field_2}"
        }
    }
	
	mutate {
		copy => { "source_field" => "source_field_copy" }
	}
	
	# works on object
	# does not work on object arrays or nested object arrays

	mutate {
        add_field => { "target_field" => "%{[source_object_field][source_object_sub_field]}"}
    }

	# works on nested object, having at least 1 item
	# works on object array, having at least 1 item
	# does not work on object

	mutate {
        add_field => { "target_field" => "%{[source_nested_object_field][0][source_object_sub_field]}"}
	}

	mutate {
		rename => {"[source_field]" => "[target_field]"}
    }

	mutate {
		remove_field => [ "source_field" ]
	}

	# works on object
	# does not work on object arrays or nested object arrays

	mutate {
		remove_field => [ "[source_object_field][source_object_sub_field]" ]
	}

	# equivalent code for sub-field removal

    ruby {
        code => '
            original_nested_object_array = event.get("NESTED")
            new_nested_object_array = Array.new()
            original_nested_object_array.each { |original_nested_object|
                original_nested_object.delete("an_objects_field")
                new_nested_object_array.push(original_nested_object)
            }
            event.set("NESTED", new_nested_object_array)
        '
    }

	# create field with empty string value if field does not exist
	# but if field exists and contains empty value, this will transform it to array [ "", "" ]
	# see script below

	if !([field]) {
		mutate {
			add_field => { "field" => ""}
		}
	}

    # create field with empty string value if field does not exist

	if !([field]) and !("" in [field]) {
        mutate {
            add_field => { "field" => ""}
        }
    }

	# aggregation of documents, collecting until timeout
	    # custom field (#1) with e.g. by generating ID by concatenated fields of duplicated events
        # all events with same ID value will be aggregated
        # field (#2) might be added if event.cancel() is not used, for original / aggregated event distinction
        # fields in map will be pushed as event after timeout

    aggregate {
        task_id => "%{TASK_ID}"                                     # 1
        code => "
            map['AGGREGATED'] ||= 'false'                           # 2
            map['output_field'] ||= event.get('input_field')
            event.cancel()                                          # optionally cancels this event, and only aggregated event goes through
        "
        timeout_code => "event.set('AGGREGATED', 'true')"
        push_map_as_event_on_timeout => true
        timeout => 60                                               # in seconds
        timeout_tags => ['_aggregatetimeout']
    }

--------------------------
other
--------------------------

logstash -f my_configuration.conf --path.data /usr/share/logstash/my_data_folder --debug

logstash-plugin list
logstash-plugin install logstash-filter-prune
logstash-plugin install logstash-codec-avro_schema_registry
logstash-plugin install logstash-codec-avro



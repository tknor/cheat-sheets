
--------------------------------
unorganized
--------------------------------

sudo apt-get update
sudo apt-get install node-typescript

--------------------------------
scripts
--------------------------------

#!/bin/bash													// header

. common.sh													// including other scripts

set -e														// immediate exit on error
set -u														// immediate exit on unset variable
set -x														// mirroring commands to stderr

VAR_MY="value"					    						// store value in variable (no whitespace!)
echo $VAR_PWD												// retrieve value from variable

echo $A                                                     // prints value
echo "$A"                                                   // prints value
echo '$A'                                                   // prints literally

VAR_A=10
VAR_B=$(($VAR_A - 1))                                       // arithmetic

$(($VAR_NUMBER - 1))										// arithmetic evaluation

VAR_PWD=$(pwd)												// store command result (from sub-shell) to variable
VAR_PWD=`pwd`                                               // ... same

command1 || command2                                        // chaining, command2 only if first fails
command1 && command2                                        // chaining, command2 only if first succeeds
command1 ; command2                                         // both run

[[ ... ]]                                                   // evaluates as true / false (success / failure)
false || echo "this will be shown"

if [[ ... ]]; then
elif [[ ... ]]; then
else
fi

! [[ ... ]]                                                 // negation (whitespace needed)

[[ -v VAR_SOME ]]                                           // variable exists

[[ $VAR_SOME ]]                                             // variable not empty (contains non-empty string or number), does not prevent 'unbound variable'
[[ "$VAR_SOME" ]]                                           // ... same
[[ -z $VAR_SOME ]]                                          // variable is empty string, does not prevent 'unbound variable'
[[ -z "$VAR_SOME" ]]                                        // ... same

[[ $VAR_SOME -eq 1 ]]                                       // integer conditions (eq / ne / gt / ge / lt / le)
[[ "$VAR_SOME" == "some_value" ]]                           // string conditions (==, !=), quotes optional

[[ ( $a -eq 1 && $b -eq 2 ) || ( ... ) ]]                   // multiple conditions

[[ $? == 0 ]]                                               // last command succeeded
[[ $(docker container ls -aq) ]]                            // non-empty command output

VAR_COMMAND=$(docker container ls -aq)
[[ $? == 0 ]] && [[ $VAR_COMMAND ]]                         // last command succeeded, with non-empty output

[[ $VAR_SOME =~ suffix$ ]]                                  // VAR_SOME matches RegEx suffix$

[[ -f "/file.txt" ]]                                        // file exists
[[ -d "/folder" ]]                                          // folder exists
[[ -d "/path/folder/" ]]            						// folder exists

$#                                                          // number of arguments
$1                                                          // value of first argument
$?                                                          // last command's exit code

!!                                                          // repeats last command
!$                                                          // repeats last argument of the last command
!$:h                                                        // if the last argument was a path/file, outputs path

--------------------------------
commands
--------------------------------

grep PATTERN                                                // find matching, input from stdin, repeats if matches
grep PATTERN file1 file2                                    // find matching, input from file(s)
grep -i                                                     // ignore case
grep -w                                                     // whole words only
grep -B 3                                                   // with context, lines A after, B before, C both
grep -e PATTERN1 -e PATTERN2                                // multiple patterns easily
grep -F PATTERN                                             // fixed pattern, no regex meta-characters
grep -o PATTERN                                             //

egrep                                                       // short for grep -E (extended regex pattern)
fgrep                                                       // short for grep -F (fixed string pattern)

diff file1 file2                                            // show differences between files
diff <(grep PATTERN file1) <(grep PATTERN file2)

read -p "write your name: " VAR_NAME
read -p "press ENTER continue"
read -n 1 -s -r -p "press any key to continue"

whereis [command]

echo "$A"                                                   // prints value
echo '$A'                                                   // prints literally

echo "Hello"
echo 'Hello' > .gitignore									// write to file (overwrite)
echo 'Hello' >> .gitignore									// write to file (append)

printf "Hello\n"											// more consistent than echo, definitely supports newlines

rm file.txt
rm [file_prefix]*
rm -f file.txt												// forced - deletes write-protected file & silent when file does not exist
rm -rf "folder/"											// delete folder recursively and forced

find														// list folder structure
find . -not -path '*/\.*'									// structure without those starting with dot

mkdir -p src/main/resources/META-INF						// create folder with all the parents

cp -r "/folder/" "/destination/"           					// recursive folder copy (as /destination/folder)
cp "path/file.txt" "another/file.txt"                       // file copy

tail file.txt
tail -f file.txt
tail -1000 file.txt

chmod u=rwx,g=rx,o=r file.txt		    					// permissions

nano [filename]

[command] &                                                 // run command and push to background
jobs                                                        // see commands pushed to background
disown                                                      // commands will continue running even when terminal closes

[command] | tee file1 file2 file3                           // output of command to console and each file

date                                                        // current time
date --utc
date -u

echo $(date '+%Y-%m-%d')                                    // formatted current date (old way)
printf '%(%Y-%m-%d %H:%M:%S)T' -1                           // formatted current date (new way)

[command] > /dev/null                                       // hide output
[command] > /dev/null 2>&1                                  // hide output and errors (redirects stderr to stdout, so errors (if any) also goes to /dev/null)

wc -l file.txt												// number of lines in a file
wc -l < file.txt											// outputs only the number


return <n>
exit <n>

sed -i 's/\r//' file.txt									// line endings (win -> unix)

adduser <username>
passwd

apt update
apt upgrade
apt install sudo

usermod -aG sudo <username>

crontab -l                                                  // see current user's cron jobs
crontab -e                                                  // edit cron jobs
sudo crontab -u [user] -l                                   // see different user's cron jobs

cat /var/log/syslog                                         // log containing executions by cron

yum install lsof											// installing lsof command

--------------------------------
network related
--------------------------------

sudo lsof -i -P -n | grep LISTEN
sudo netstat -tulpn | grep LISTEN
sudo lsof -i:22                                             // see a specific port such as 22
sudo nmap -sTU -O <some_IP_address>

curl localhost:8080
curl localhost:9200 | json_pp								// prettify JSON
curl -v localhost:8080										// ?

curl -o out.json -H "Content-Type: application/json" localhost:9200/_search
curl -d @in.json -o out.json -XPOST -H "Content-Type: application/json" localhost:9200/_search
curl -d @in.json -o out.json -XPUT -H "Content-Type: application/json" localhost:9200/_search
curl -d @in.json -o out.json -XDELETE -H "Content-Type: application/json" localhost:9200/_search

ssh root@<ip>

--------------------------------
Debian 9 management
--------------------------------

# connect as root

ssh root@<ip>

# create non-root user

adduser <username>

# connect as user
# check sudo is installed

sudo apt update

# if not, connect as root

apt update
apt upgrade

# restart server
# connect as root
# install sudo

apt install sudo

# add user to sudo group

usermod -aG sudo <username>

--------------------------------
Open SSH
--------------------------------

ssh-keygen -t ed25519 -C "email@example.com"				// generate SSH key pair, key type ED25519, with comment, prompts for output file later
ssh-keygen -t rsa -b 4096 -C "email@example.com"

ssh -T git@gitlab.com										// replies with welcome message if your PubKey on server == some PubKey in your ~/.ssh key pairs

--------------------------------
bash prompt
--------------------------------

echo "Question?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) command; break;;
        No ) exit;;
    esac
done

--------------------------------
notes
--------------------------------

$() creates sub-shell
script (command) has arguments, exit code, may have output
variables from script or sub-shell are not accessible from outside
function in script can have local variables
non-local function variables and script variables are accessible from anywhere in the script itself

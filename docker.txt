
docker images											// alias to docker image ls
docker build											// alias to docker image build
docker ps												// alias to docker container ls
docker rm												// alias to docker container rm

docker image ls
docker image build .												// . is a PATH to build file and copied folders, etc.
docker image build -t <name> .										// name the image
docker image build -t <name>:<tag> .								// name the image with optional tag
docker image build -f <alt-Dockerfile-file> .
docker image rm

docker pull <optional-registry>/<image-path>:<image-tag>
docker tag <local-image-id> <optional-registry>/<image-path>:<image-tag>
docker push <optional-registry>/<image-path>:<image-tag>

// name when building for docker hub: <username>/<app>

docker network ls
docker network inspect <network>									// also lists containers in network with their IPs
docker network connect <network> <container>

docker inspect <container>
docker logs <container>

docker exec -u 0 -it <container> bash								// interactive terminal as a ROOT user
docker exec -it <container> bash									// interactive terminal
docker exec -it <container> sh										// interactive terminal
docker exec -it <container> /bin/bash
docker exec <container> pwd											// standard standalone command (sometimes does not work)
docker exec <container> bash -c "mkdir -p /folder/sub-folder"		// works even for shell built-in commands (like 'cat' command)
docker exec <container> bash -c 'mkdir -p /folder/sub-folder'
docker exec <container> bash -c "cd folder && ls -la"				// for multiple commands

winpty docker exec -it ...											// when running from Windows (Git Bash)

CTRL + P then CTRL + Q												// exit shell, but leaving the container running
docker attach <container>											// regain shell access

docker cp <container>:/usr/home/file.txt file.txt
docker cp file.txt <container>:/usr/home/file.txt					// before copying: sed -i 's/\r//' file.txt // line endings (win -> unix)

docker login --username=<user> --email=<email>

docker container ls
docker container ls -a
docker container ls -aq												// list of container IDs
docker container ls -aqf "name=^<container-name>$"					// gets id of a container by name
docker container rm -f $(docker container ls -aq)					// stopping and removing all containers

docker run <image>:<version>										// version is optional
docker run -d --name <preferred_name> <image>						// detached, named
docker run -d --rm <image>											// does not leave stopped container
docker run -d -p <port-local>:<port-container> <image>				// port forwarding, safe target e.g. 46160
docker run -d -P <image>											// random 80 / 443 port mapping
docker run -d <image> --appendonly yes								// ?
docker run -d -e "XPACK1=value1" -e "XPACK2=value2" <image>			// set environmental variables
docker run -v <local-dir>:<container-dir>:ro <image>				// mounting local folder (:ro means read-only) // e.g. -v /var/www:/var/html:ro

docker cp file.txt <container>:/file.txt
docker cp <container>:/file.txt file.txt

// <image> specification can contain registry and user: <registry>/<user>/<image>

docker create											// part of docker run
docker start <container>								// part of docker run

// build (from image) is not part of docker run - image must be in local registry or docker hub registry

docker stop <container>
docker stop $(docker container ls -aq)					// stopping all containers

// pruning (should not affect running containers):

docker image prune -f									// all dangling images (unreferenced, untagged)
docker image prune -a -f								// all images unused by existing containers
docker container prune -f								// all stopped containers
docker volume prune -f									// all unused volumes
docker network prune -f									// all unused networks
docker system prune --volumes -f						// everything

docker-compose up
docker-compose up -d									// detached
docker-compose up -d --build							// clean builds containers
docker-compose -f <alt-docker-compose-file> up
docker-compose down
docker-compose create <container>						// part of docker-compose up
docker-compose start <container>						// part of docker-compose up
docker-compose nework create <network>
docker-compose nework create docker_default

ARG <name>[=<default value>]
--build-arg <varname>=<value>

// add to docker file if you need to keep container running

CMD tail -f /dev/null


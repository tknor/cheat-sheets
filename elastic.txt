
elk stack docker containers contain default configuration yaml files
    can be overriden using volumes in docker-compose
        providing another configuration yaml file (best based on the default one)
    can be overriden using environment variables
        "xpack.security.enabled: true" will have equivalent "XPACK_SECURITY_ENABLED: true"

when running with security enabled
    there's utility to initialize passwords
        /usr/share/elasticsearch/bin/elasticsearch-setup-passwords

./elasticsearch-setup-passwords auto                    // generates and prints users / passwords

----------------------------
basic operations
----------------------------

GET /_aliases
GET /_cat/indices
GET /_cat/indices?v

GET _ilm/policy/some_policy

GET /some_index
GET /some_index/_settings
GET /some_index/_mappings

GET /_security/_authenticate                            // information about authenticated user (or user used in basic-authenticated request)

PUT /_security/user/<user>
{
  "password" : "<plain_text_password>",
  "roles" : [ "admin", "superuser" ],
  "full_name" : "",
  "email" : "",
  "metadata" : {}
}

                                                        // when security handled by opendistro plugin:

GET /_opendistro/_security/authinfo                     // information about authenticated user

GET /some_index/_search
{
  "query": {
    "match_all": {}
  },
  "size": "10"
}

POST /some_index/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}

DELETE /some_index/_doc/12345
DELETE /some_index

PUT /accounts

POST /accounts/person/1
{
    "name" : "Tomas",
}

PUT /accounts/person/1
{
    "name" : "Tomas",
}

PUT /accounts/person/1/_update
{
    "doc": {
        "name": "Tomas"
    }
}

------------------------------
CURL
------------------------------

curl -o out.json -H "Content-Type: application/json" localhost:9200/_search
curl -d @in.json -o out.json -XPOST -H "Content-Type: application/json" localhost:9200/_search
curl -d @in.json -o out.json -XPUT -H "Content-Type: application/json" localhost:9200/_search
curl -d @in.json -o out.json -XDELETE -H "Content-Type: application/json" localhost:9200/_search

------------------------------
URL params
------------------------------

/_search?q=john
/_search?q=job_description:veteran

/accounts/person/_search?q=john
/accounts/person/_search?q=job_description:veteran

/_search?q=john&size=10

------------------------------
searches
------------------------------

Leaf:
	term, terms
	match, multi_match
	match_phrase
	match_all
	match_none
	range

Compound:
	bool query
		- must, filter, should, must_not
		
------------------------------
simple search query examples
------------------------------

GET _search
{
  "query": {
    "match_all": {}
  }
}

GET /flies/fly/_search

GET /flies/_search

{
    "query": {
        "match": {
            "_id": "12345"
        }
    }
}

{
    "query": {
        "term": {
            "status": "operational"
        }
    }
}

{
    "query": {
        "term": {
            "status.keyword": "Operational"
        }
    }
}

{
    "query": {
        "match": {
            "vendor.keyword": "Sukhoi"
        }
    }
}

{
    "query": {
        "match": {
            "vendor": "sukhoi"
        }
    }
}

------------------------------
bool search query examples
------------------------------

{
    "query": { 
      "bool": { 
        "must": [
          { "match": { "vendor" : "Sukhoi" }}
        ]
      }
    }
}

{
    "query": { 
      "bool": { 
        "must": [
          { "match": { "vendor" : "Sukhoi" }}, 
          { "term": { "model" : "27" }}
        ]
      }
    }
}

{
    "query": { 
      "bool": { 
        "must_not": [
          { "match": { "vendor" : "Sukhoi" }}
        ]
      }
    }
}

{
    "query": { 
      "bool": { 
        "must_not": [
          { "match": { "vendor" : "Sukhoi" }},
          { "match": { "country" : "UK" }}
        ]
      }
    }
}

{
    "query": { 
      "bool": { 
        "should": [
          { "match": { "vendor" : "Grumman" }}
        ]
      }
    }
}

{
    "query": { 
      "bool": { 
        "should": [
          { "match": { "vendor" : "Sukhoi" }},
          { "match": { "vendor" : "Grumman" }}
        ]
      }
    }
}

--------------------------------------
timestamp range search query example
--------------------------------------

{
    "query": {
        "range": {
            "@timestamp": {
                "gte": "2019-12-09T11:30:00",
                "lte": "2019-12-09T11:33:00"
            }
        }
    }
}

------------------------------
existing field query example
------------------------------

GET /flies/_search
{
    "query": {
        "exists": {
            "field": "some-field"
        }
    }
}

------------------------------
wildcard search query example
------------------------------

{
    "query" : {
        "wildcard": { "model.keyword": "M*" }
    }
}

---------------------------------
multi term search query example
---------------------------------

{
    "query" : {
        "term" : { "vendor": "sukhoi" }
    }
}

{
    "query" : {
        "terms" : { "vendor": ["sukhoi", "grumman"] }
    }
}

is equivalent to:

{
	"query" : {
		"bool": {
			"should": [
				{ "term" : { "vendor" : "sukhoi" }},
				{ "term" : { "vendor" : "grumman" }}
			]
		}
	}
}

----------------------------------
multi match search query example
----------------------------------

{
    "query" : {
        "match" : { "vendor" : "Gurevich" }
    }
}

{
  "query": {
    "multi_match" : {
      "query": "Gurevich", 
      "fields": [ "vendor", "model" ] 
    }
  }
}

equivalent to:

{
	"query": {
		"bool" : {
			"should": [
				{ "match": { "vendor": "Gurevich" }},
				{ "match": { "model": "Gurevich" }}
			]
		}
	}
}

------------------------------------
script field query example
------------------------------------

GET /flies/_search
{
    "query": {
        "match_all": {}
    },
    "script_fields": {
      "custom-script-field": {
        "script": {
          "lang": "painless",
          "source": """
            if (doc.containsKey('some-field.keyword')) {
              return doc['some-field.keyword'];
            } else {
              return "UNKNOWN"
            }
          """
        }
      }
    },
    "_source": [ "*" ]
}

------------------------------------
filter script search query example
------------------------------------

// timestamp that has .000Z (no millis after second)

GET /flies/_search
{
    "query": {
        "bool" : {
            "filter" : {
                "script" : {
                    "script" : {
                        "source": "doc['timestamp'].value.getMillisOfSecond() == 0",
                        "lang": "painless"
                     }
                }
            }
        }
    }
}

-----------------
naming queries
-----------------

{
    "query": {
        "terms": {
            "_name": "query_001",
            "vendor": ["sukhoi", "grumman"]
        }
    }
}

{
    "query": {
        "multi_match": {
            "_name": "query_001",
            "query": "Gurevich",
            "fields": ["vendor", "model"]
        }
    }
}

{
    "query": {
        "bool": {
            "_name": "query_001",
            "must": [
				{ "match": { "vendor": "Sukhoi" } },
				{ "term": { "model": "27" } }
            ]
        }
    }
}

------------------------------
bool query inside bool query
------------------------------

GET /flies/_search
{
    "query": { 
      "bool": { 
        "must": [
          { "match": { "vendor" : "Sukhoi" }}, 
          { "bool": { 
              "should": [
                { "term": { "model" : "27" }},
                { "term": { "model" : "33" }}
              ]
            }}
        ]
      }
    }
}

---------------------------------
combining nested and non-nested
---------------------------------

GET flies/_search
{
	"query": {
		"bool": {
			"must": [{
					"bool": {
						"should": [
							{ "match": {} },
							{ "match": {} }
						]
					}
				}, {
					"nested": {
						"path": "ADDRESS",
						"query": {
							"bool": {
								"should": [{
										"bool": {
											"must": [
												{ "match": {} }, 
												{ "match": {} }
											]
										}
									}, {
										"bool": {
											"must": [
												{ "match": {} }, 
												{ "match": {} }
											]
										}
									}
								]
							}
						}
					}
				}
			]
		}
	}
}

----------------------------
simple ingest pipeline
----------------------------

PUT /_ingest/pipeline/my_simple_pipeline
{
  "description" : "",
  "processors" : [
    {
      "set" : {
        "field": "name",
        "value": "this value SHOULD BE visible in inserted document"
      }
    }
  ]
}

PUT /my_index/_doc/1?pipeline=my_simple_pipeline
{
  "name": "this value SHOULD NOT BE visible in inserted document"
}

----------------------------
enrich ingest pipeline
----------------------------

POST /index_with_additional_info/_doc/1
{
	"name": "Frank",
	"naughty": "yes"
}

POST /index_with_additional_info/_doc/2
{
	"name": "Lucy",
	"naughty": "no"
}

PUT /_enrich/policy/naughty-policy
{
  "match": {
    "indices": "index_with_additional_info",
    "match_field": "name",
    "enrich_fields": [ "naughty" ]
  }
}

PUT /_enrich/policy/naughty-policy/_execute

PUT /_ingest/pipeline/naughty-pipeline
{
  "description" : "",
  "processors" : [
    {
      "enrich" : {
        "policy_name": "naughty-policy",
        "field": "first_name",
        "target_field": "additional_info"
      }
    }
  ]
}

PUT /my_index/_doc/1?pipeline=naughty-pipeline
{
  "first_name": "Frank",
  "age": "70"
}

// inserted document should look like this:

{
  "first_name": "Frank",
  "age": "70",
  "additional_info": {
    "name": "Frank",
    "naughty": "yes"
  }
}

----------------------------
aliases
----------------------------

GET /_aliases

POST /_aliases
{
    "actions" : [
		{ "add" : { "index" : "index1", "alias" : "alias1" } },
        { "remove" : { "index" : "index2", "alias" : "alias2" } }
    ]
}

----------------------------
limit results
----------------------------

GET /flies/fly/_search
{
  "size": 10
}

------------------------------------
show only certain, specific fields
------------------------------------

GET /flies/fly/_search
{
  "_source": [ "vendor", "model" ]
}

----------------------------
sorting / ordering
----------------------------

GET /flies/fly/_search
{
	"query": {
		"match_all": {}
	},
    "sort": [
        {"vendor.keyword": "asc"},
        {"model.keyword": "asc"}
    ]
}

--------------------------------------------------------
paging (default 10000 limit, "from + size" < 10000)
--------------------------------------------------------

GET /flies/fly/_search
{
    "query" : {
        "match_all": {}
    },
    "from" : 0,
    "size" : 3
}

------------------------------------------------------------------------------------
creating index pattern... hanging problem, 403 forbidden in browser console
------------------------------------------------------------------------------------

curl -d @in.json -XPUT -H "Content-Type: application/json" localhost:9200/_all/_settings

{
	"index.blocks.read_only_allow_delete": null
}

----------------------------------------------------
synonym analyzer examples (inline & from file)
----------------------------------------------------

PUT /source
{
    "settings": {
        "index": {
            "analysis": {
                "analyzer": {
                    "synonym_analyzer": {
                        "tokenizer": "whitespace",
                        "filter": [
                            "lowercase",
                            "synonym_filter"]
                    }
                },
                "filter": {
                    "synonym_filter": {
                        "type": "synonym",
                        "synonyms": [
                            "tom, tomas, thomas, tomik, tommy, tomasek"
                        ]
                    }
                }
            }
        }
    },
    "mappings": {
        "properties": {
            "name": {
                "type": "text",
                "analyzer": "synonym_analyzer"
            }
        }
    }
}

PUT /source
{
    "settings": {
        "index": {
            "analysis": {
                "analyzer": {
                    "synonym_analyzer": {
                        "tokenizer": "whitespace",
                        "filter": [
                            "lowercase",
                            "synonym_filter"]
                    }
                },
                "filter": {
                    "synonym_filter": {
                        "type": "synonym",
                        "synonyms_path" : "analysis/synonyms.txt"
                    }
                }
            }
        }
    },
    "mappings": {
        "properties": {
            "name": {
                "type": "text",
                "analyzer": "synonym_analyzer"
            }
        }
    }
}

POST /source/_doc/1
{
    "name": "Tomas"
}

GET /source/_search
{
    "query": {
        "match": {
            "name": "Tom"
        }
    }
}

---------------------------
phonetic analyzer example
---------------------------

FROM docker.elastic.co/elasticsearch/elasticsearch:7.2.1
RUN bin/elasticsearch-plugin install analysis-phonetic

PUT /flies
{
    "settings": {
        "number_of_shards": 1,
        "analysis": {
            "analyzer": {
                "metaphone_phonetic_analyzer": {
                    "tokenizer": "standard",
                    "filter": [ "lowercase", "metaphone_filter"
                    ]
                },
				"beider_morse_phonetic_analyzer" : {
					"tokenizer" : "standard",
					"filter" : [ "lowercase", "beider_morse_filter"]
				}
            },
            "filter": {
                "metaphone_filter": {
                    "type": "phonetic",
                    "encoder": "metaphone",
                    "replace": false
                },
				"beider_morse_filter" : {
					"languageset" : "any",
					"type" : "phonetic",
					"encoder" : "beider_morse"
				}
            }
        }
    }
}

------------------------------
lowercase normalizer example
------------------------------

PUT /flies
{
	"settings": {
		"number_of_shards": 1,
		"analysis": {
			"normalizer": {
				"lowercase_normalizer": {
					"type": "custom",
					"char_filter": [],
					"filter": ["lowercase"]
				}
			}
		}
	},
	"mappings": {
		"fly": {
			"properties": {
				"vendor": {
					"type": "text",
					"fields": {
						"keyword": {
							"type": "keyword"
						},
						"lckeyword": {
							"type": "keyword",
							"normalizer": "lowercase_normalizer"
						}
					}
				}
			}
		}
	}
}

-----------------------
query string query
-----------------------

GET /source/_search
{
  "query": {
    "query_string": {
      "query": "name:test"
    }
  }
}

"query": "name:Tom OR name:John"
"query": "(name:prefix*) AND (name:*suffix)"
"query": "!(_exists_:field)"

# field exists and is not empty
"query": "((_exists_:field) AND !(field.keyword:\"\"))"

# field does not exist or it's empty
"query": "!((_exists_:field) AND !(field.keyword:\"\"))"


-----------------------
update index mapping
-----------------------

PUT /flies/_mapping/fly
{
	"properties": {
		"name": {
			"type": "text",
			"fields": {
				"sort-keyword": {
					"type": "keyword"
				},
				"filter-keyword": {
					"type": "keyword"
				}
			}
		}
	}
}

----------------------------
nested fields example
----------------------------

PUT / anindex
{
    "mappings": {
        "properties": {
            "address": {
                "type": "nested",
                "properties": {
                    "city": {
                        "type": "text"
                    },
                    "street": {
                        "type": "text"
                    }
                }
            }
        }
    }
}

PUT /anindex/_doc/1
{
  "name" : "John Brambor",
  "address" : [
    {
      "city" : "London",
      "street" : "Elm street"
    },
    {
      "city" : "Prague",
      "street" : "Dvorakova"
    }
  ]
}

GET /anindex/_doc/_search
{
    "query": {
        "nested": {
            "path": "address",
            "query": {
                "bool": {
                    "must": [
						{ "match": { "address.city": "Prague" }},
						{ "match": { "address.street":  "Dvorakova" }}
                    ]
                }
            }
        }
    }
}

----------------------------------
setting pagination / paging limit
----------------------------------

PUT /world_check/_settings
{
    "index" : {
        "max_result_window" : 100000
    }
}

----------------------------
index template example
----------------------------

PUT _template/flies_template
{
    "order": 0,
    "index_patterns": [
        "flies-*"
    ],
    "settings": {
        "index": {
            "lifecycle": {
                "name": "flies_policy",
                "rollover_alias": "flies"
            },
            "number_of_shards": "1",
            "number_of_replicas": "0"
        }
    },
    "mappings": {
        "properties": {
            "timestamp": {
                "type": "date"
            }
        }
    },
    "aliases": {}
}

----------------------------
bulk / batch create
----------------------------

POST /flies/fly/_bulk
{ "create": { "_id" : 100 } }
{ "vendor" : "McDonnell Douglas", "model" : "F-15 Eagle", "country" : "US", "status" : "Operational" }
{ "create": { "_id" : 101 } }
{ "vendor" : "McDonnell Douglas", "model" : "AV-8B Harrier", "country" : "US, UK", "status" : "Operational" }
{ "create": { "_id" : 102 } }
{ "vendor" : "McDonnell Douglas", "model" : "F/A-18 Hornet", "country" : "US", "status" : "Operational" }
{ "create": { "_id" : 103 } }
{ "vendor" : "Mikoyan-Gurevich", "model" : "Mig-15", "country" : "USSR", "status" : "Production" }
{ "create": { "_id" : 104 } }
{ "vendor" : "Mikoyan-Gurevich", "model" : "Mig-19", "country" : "USSR", "status" : "Production" }
{ "create": { "_id" : 105 } }
{ "vendor" : "Mikoyan-Gurevich", "model" : "Mig-21", "country" : "USSR", "status" : "Operational" }
{ "create": { "_id" : 106 } }
{ "vendor" : "Sukhoi", "model" : "Su-27", "country" : "USSR", "status" : "Operational" }
{ "create": { "_id" : 107 } }
{ "vendor" : "Sukhoi", "model" : "Su-33", "country" : "Russia", "status" : "Operational" }
{ "create": { "_id" : 108 } }
{ "vendor" : "Grumman", "model" : "F-14 Tomcat", "country" : "US", "status" : "Operational" }

POST /flies/fly/_bulk
{ "create": { "_id" : 100 } }
{ "vendor" : "McDonnell Douglas", "model" : "F-15 Eagle", "country" : "US", "status" : "Operational", "pretty" : "true", "invented" : "1972-01-01", "manufactured" : "1196", "designation" : "Eagle" }
{ "create": { "_id" : 101 } }
{ "vendor" : "McDonnell Douglas", "model" : "AV-8B Harrier", "country" : "US, UK", "status" : "Operational", "pretty" : "false", "invented" : "1993-01-01", "manufactured" : "133", "designation" : "Harrier" }
{ "create": { "_id" : 102 } }
{ "vendor" : "McDonnell Douglas", "model" : "F/A-18 Hornet", "country" : "US", "status" : "Operational", "pretty" : "false", "invented" : "1978-01-01", "manufactured" : "1480", "designation" : "Hornet" }
{ "create": { "_id" : 103 } }
{ "vendor" : "Mikoyan-Gurevich", "model" : "Mig-15", "country" : "USSR", "status" : "Production", "pretty" : "false", "invented" : "1947-01-01", "manufactured" : "18000", "designation" : "Fagot" }
{ "create": { "_id" : 104 } }
{ "vendor" : "Mikoyan-Gurevich", "model" : "Mig-19", "country" : "USSR", "status" : "Production", "pretty" : "false", "invented" : "1953-01-01", "manufactured" : "2172", "designation" : "Farmer" }
{ "create": { "_id" : 105 } }
{ "vendor" : "Mikoyan-Gurevich", "model" : "Mig-21", "country" : "USSR", "status" : "Operational", "pretty" : "false", "invented" : "1955-01-01", "manufactured" : "11496", "designation" : "Fishbed" }
{ "create": { "_id" : 106 } }
{ "vendor" : "Sukhoi", "model" : "Su-27", "country" : "USSR", "status" : "Operational", "pretty" : "true", "invented" : "1977-01-01", "manufactured" : "680", "designation" : "Flanker" }
{ "create": { "_id" : 107 } }
{ "vendor" : "Sukhoi", "model" : "Su-33", "country" : "Russia", "status" : "Operational", "pretty" : "true", "invented" : "1987-01-01", "manufactured" : "24", "designation" : "Flanker-D" }
{ "create": { "_id" : 108 } }
{ "vendor" : "Grumman", "model" : "F-14 Tomcat", "country" : "US", "status" : "Operational", "pretty" : "true", "invented" : "1970-01-01", "manufactured" : "712", "designation" : "Tomcat" }

------------------------------
queries notes
------------------------------

- query produces hits with scores

- term query takes input as a term and looks for it
- match query takes input as a text and constructs terms and looks for them

Leaf:
	term, terms
	match, multi_match
	match_phrase
	match_all
	match_none
	range

Compound:
	bool query
		- next level must be one or more groups
			- must, filter, should, must_not
			- group can contain other queries (leaf or compound)
		- document that returns from more groups has higher score

***	

# works
# document has "status" : "Operational"
# elastic stores term "status" : "operational"
# term query looks for "status" : "operational"

GET /flies/fly/_search
{
  "query" : {
    "term" : { "status" : "operational" }
  }
}

# does not work
# document has "status" : "Operational"
# elastic stores term "status" : "operational"
# term query looks for "status" : "Operational"
# it does not exist

GET /flies/fly/_search
{
  "query" : {
    "term" : { "status" : "Operational" }
  }
}

-----------------

# works
# document has "status" : "Operational"
# elastic stores field "status.keyword" : "Operational"
# term query looks for "status.keyword" : "Operational"

GET /flies/fly/_search
{
  "query" : {
    "term" : { "status.keyword" : "Operational" }
  }
}

# does not work
# document has "status" : "Operational"
# elastic stores field "status.keyword" : "Operational"
# term query looks for "status.keyword" : "operational"
# it does not exist

GET /flies/fly/_search
{
  "query" : {
    "term" : { "status.keyword" : "operational" }
  }
}

-----------------

# does not work
# equivalent to "term" : { "vendor.keyword" : "sukhoi" }

GET /flies/fly/_search
{
    "query" : {
        "match" : { "vendor.keyword" : "sukhoi" }
    }
}

# works
# equivalent to "term" : { "vendor.keyword" : "Sukhoi" }

GET /flies/fly/_search
{
    "query" : {
        "match" : { "vendor.keyword" : "Sukhoi" }
    }
}

-----------------

# works
# documents have
	"vendor" : "Sukhoi"
	"vendor" : "Mikoyan-Gurevich"
# elastic stores terms
	"vendor" : "sukhoi"
	"vendor" : "mikoyan"
	"vendor" : "gurevich"
# match query takes "vendor" : "sukhoi", constructs temporary terms:
	"vendor" : "sukhoi"
# one of the values is present, it returns documents with "Sukhoi"

GET /flies/fly/_search
{
    "query" : {
        "match" : { "vendor" : "sukhoi" }
    }
}

# works
# documents have
	"vendor" : "Sukhoi"
	"vendor" : "Mikoyan-Gurevich"
# elastic stores terms
	"vendor" : "sukhoi"
	"vendor" : "mikoyan"
	"vendor" : "gurevich"
# match query takes "vendor" : "Sukhoi", constructs temporary terms:
	"vendor" : "sukhoi"
# one of the values is present, it returns documents with "Sukhoi"

GET /flies/fly/_search
{
    "query" : {
        "match" : { "vendor" : "Sukhoi" }
    }
}

-----------------

# works
# documents have
	"vendor" : "Sukhoi"
	"vendor" : "Mikoyan-Gurevich"
# elastic stores terms
	"vendor" : "sukhoi"
	"vendor" : "mikoyan"
	"vendor" : "gurevich"
# match query takes "vendor" : "sukhoi-gurevich", constructs temporary terms:
	"vendor" : "sukhoi"
	"vendor" : "gurevich"
# two values are present, it returns documents with "Sukhoi" and documents with "Mikoyan-Gurevich"

GET /flies/fly/_search
{
    "query" : {
        "match" : { "vendor" : "sukhoi-gurevich" }
    }
}

-----------------

# must is IF
# equivalent to filter, filter is in filter context, must is in query context
GET /flies/fly/_search
{
    "query": { 
      "bool": { 
        "must": [
          { "match": { "vendor" : "Sukhoi" }}
        ]
      }
    }
}

# must is AND
# equivalent to filter, filter is in filter context, must is in query context
GET /flies/fly/_search
{
    "query": { 
      "bool": { 
        "must": [
          { "match": { "vendor" : "Sukhoi" }}, 
          { "term": { "model" : "27" }}
        ]
      }
    }
}

-----------------

# must_not is IF NOT
# in filter context
GET /flies/fly/_search
{
    "query": { 
      "bool": { 
        "must_not": [
          { "match": { "vendor" : "Sukhoi" }}
        ]
      }
    }
}

# must_not is NAND
# in filter context
GET /flies/fly/_search
{
    "query": { 
      "bool": { 
        "must_not": [
          { "match": { "vendor" : "Sukhoi" }},
          { "match": { "country" : "UK" }}
        ]
      }
    }
}

-----------------

# should is IF
GET /flies/fly/_search
{
    "query": { 
      "bool": { 
        "should": [
          { "match": { "vendor" : "Grumman" }}
        ]
      }
    }
}

# should is OR
GET /flies/fly/_search
{
    "query": { 
      "bool": { 
        "should": [
          { "match": { "vendor" : "Sukhoi" }},
          { "match": { "vendor" : "Grumman" }}
        ]
      }
    }
}
